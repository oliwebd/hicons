#!/usr/bin/env node
import { promises as fs } from "fs";
import { join, existsSync } from "path";
import glob from "glob";
import { icons } from "lucide";

// Determine partial path
let PARTIAL_PATH = "";
if (existsSync(join("layouts", "partials", "icons.html"))) {
  PARTIAL_PATH = join("layouts", "partials", "icons.html");
} else if (existsSync(join("layouts", "_partials", "icons.html"))) {
  PARTIAL_PATH = join("layouts", "_partials", "icons.html");
} else {
  PARTIAL_PATH = join("layouts", "_partials", "icons.html");
}

// Read existing partial content
let existingContent = "";
let existingIcons = new Set();

if (existsSync(PARTIAL_PATH)) {
  existingContent = await fs.readFile(PARTIAL_PATH, "utf-8");
  const matches = existingContent.matchAll(/{{ else if eq \$icon "([\w-]+)"/g);
  for (const m of matches) existingIcons.add(m[1]);
}

// Scan Hugo layouts
const files = glob.sync("layouts/**/*.html");
const iconNames = new Set();

for (const file of files) {
  const content = await fs.readFile(file, "utf-8");
  const matches = content.matchAll(/{{\s*partial\s+"icons\.html"\s+\(dict\s+"name"\s+"([\w-]+)"/g);
  for (const m of matches) iconNames.add(m[1]);
}

// Filter new icons
const newIcons = [...iconNames].filter(name => !existingIcons.has(name));

if (newIcons.length === 0) {
  console.log("✅ No new icons to add. Partial is up to date.");
  process.exit(0);
}

// Generate new icons content
let newContent = "";

for (const name of newIcons) {
  const icon = icons[name];
  if (!icon) {
    console.warn(`⚠ Icon not found in Lucide: ${name}`);
    continue;
  }
  const svg = icon.toSvg({ width: 24, height: 24, stroke: "currentColor" });
  newContent += `
{{ else if eq $icon "${name}" }}
${svg.replace(/<svg/, '<svg class="{{ $classes }}" aria-hidden="true"')}
`;
}

// Combine with existing content
let finalContent = existingContent
  ? existingContent.replace(/\{\{ end \}\}\s*$/, newContent + "\n{{ end }}")
  : `{{/* Auto-generated by hicons */}}\n{{ $icon := .name }}\n{{ $classes := .class | default "" }}\n{{ if false }}\n${newContent}\n{{ end }}`;

// Ensure directory exists
await fs.mkdir(join(PARTIAL_PATH, ".."), { recursive: true });

// Write/update the partial
await fs.writeFile(PARTIAL_PATH, finalContent, "utf-8");
console.log(`✅ Updated icons partial at: ${PARTIAL_PATH}`);

